<!-- Flash Messages -->
<div id="flash-messages"></div>

<!-- Search -->
<div class="mb-3">
  <input type="text" id="search-input" placeholder="Search..." class="form-control d-inline-block w-auto" value="<%= params[:search] %>">
  <button type="button" class="btn btn-secondary" onclick="document.getElementById('search-input').value = ''; document.getElementById('search-input').dispatchEvent(new Event('input'));">Clear</button>
</div>

<!-- Buttons to Open Modals -->
<!--
<div class="d-flex gap-3 my-3">
  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
    Add New Item
  </button>

  <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addToInventoryModal">
    Add to Inventory
  </button>
</div>
-->


<!--
<%= link_to 'Show Categories', categories_path %>
<%= link_to 'Show Departments', departments_path %>
-->

<!-- Inventory List (Wrapped in a Div for AJAX Updates) -->
<div id="inventory-list">
  <%= render partial: 'table', locals: { inventories: @inventories } %>
</div>

<!-- Bootstrap Modal for Adding a New Item -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="addItemModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addItemModalLabel">Create New Item</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= form_with model: @item, url: items_path, remote: true, id: "item-form" do |form| %>
          <div class="mb-3">
            <%= form.label :name, "Item Name", class: "form-label" %>
            <%= form.text_field :name, required: true, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :description, "Description", class: "form-label" %>
            <%= form.text_area :description, rows: 3, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :category_id, "Category", class: "form-label" %>
            <%= form.collection_select :category_id, Category.all, :cat_id, :name, prompt: "Select a Category", class: "form-control" %>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <%= form.submit "Create Item", class: "btn btn-primary" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>



<!-- Edit Inventory Modal -->
<div class="modal fade" id="editInventoryModal" tabindex="-1" aria-labelledby="editInventoryModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editInventoryModalLabel">Edit Inventory</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= form_with model: @inventory, url: "#", method: :patch, local: true, id: "edit-inventory-form" do |form| %>
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
          <div class="mb-3">
            Editing Item: <strong id="edit-item-name"></strong>
          </div>

          <div class="mb-3">
            <%= form.label :item_id, "Select Item", class: "form-label" %>
            <%= form.collection_select :item_id, Item.all, :id, :name, prompt: "Choose an item", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :year_of_purchase, "Year of Purchase", class: "form-label" %>
            <%= form.date_select :year_of_purchase, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :location, "Location", class: "form-label" %>
            <%= form.text_field :location, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :condition_of_item, "Condition", class: "form-label" %>
            <%= form.text_field :condition_of_item, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :owner_email, "Owner Email", class: "form-label" %>
            <%= form.collection_select :owner_email, User.all, :email, :name, prompt: "Select Owner", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :user_email, "Current User Email", class: "form-label" %>
            <%= form.collection_select :user_email, User.all, :email, :name, prompt: "Select Current User", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :sku, "SKU", class: "form-label" %>
            <%= form.text_field :sku, class: "form-control" %>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <%= form.submit "Update Inventory", class: "btn btn-primary" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>



<!-- Bootstrap Modal for Adding to Inventory -->
<div class="modal fade" id="addToInventoryModal" tabindex="-1" aria-labelledby="addToInventoryModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addToInventoryModalLabel">Add Item to Inventory</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= form_with model: @inventory, url: inventories_path, remote: true, id: "inventory-form" do |form| %>
          <div class="mb-3">
            <%= form.label :item_id, "Select Item", class: "form-label" %>
            <%= form.collection_select :item_id, Item.all, :item_id, :name, prompt: "Choose an item", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :year_of_purchase, "Year of Purchase", class: "form-label" %>
            <%= form.date_select :year_of_purchase, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :location, "Location", class: "form-label" %>
            <%= form.text_field :location, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :condition_of_item, "Condition", class: "form-label" %>
            <%= form.text_field :condition_of_item, class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :owner_email, "Owner Email", class: "form-label" %>
            <%= form.collection_select :owner_email, User.all, :email, :name, prompt: "Select Owner", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :user_email, "Current User Email", class: "form-label" %>
            <%= form.collection_select :user_email, User.all, :email, :name, prompt: "Select Current User", class: "form-control" %>
          </div>

          <div class="mb-3">
            <%= form.label :sku, "SKU", class: "form-label" %>
            <%= form.text_field :sku, class: "form-control" %>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <%= form.submit "Add to Inventory", class: "btn btn-success" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var searchInput = document.getElementById('search-input');

    searchInput.addEventListener('input', function(event) {
      var query = searchInput.value.toLowerCase();
      var rows = document.querySelectorAll('#inventory-list tbody tr');

      rows.forEach(function(row) {
        if (row.classList.contains('admin-add-row')) {
          return;
        }

        var cells = row.querySelectorAll('td');
        var match = false;

        cells.forEach(function(cell) {
          if (cell.textContent.toLowerCase().includes(query)) {
            match = true;
          }
        });

        if (match) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });

    var headers = document.querySelectorAll('th.sortable');
    var indicator = document.createElement('div');
    indicator.style.position = 'absolute';
    indicator.style.height = '5px';
    indicator.style.backgroundColor = 'darkred';
    indicator.style.transition = 'all 0.3s ease';
    document.body.appendChild(indicator);

    function positionIndicator(header) {
      var rect = header.getBoundingClientRect();
      indicator.style.width = rect.width + 'px';
      indicator.style.top = (rect.top - 5) + 'px';
      indicator.style.left = rect.left + 'px';
      indicator.style.border = 'none';
    }

    function sortTableByHeader(header) {
      var table = header.closest('table');
      var tbody = table.querySelector('tbody');
      var rows = Array.from(tbody.querySelectorAll('tr'));
      var index = Array.from(header.parentNode.children).indexOf(header);
      var ascending = header.classList.contains('ascending');

      rows.sort(function(rowA, rowB) {
        var cellA = rowA.children[index].textContent.trim();
        var cellB = rowB.children[index].textContent.trim();

        if (!isNaN(cellA) && !isNaN(cellB)) {
          cellA = parseFloat(cellA);
          cellB = parseFloat(cellB);
        }

        if (cellA < cellB) {
          return ascending ? 1 : -1;
        }
        if (cellA > cellB) {
          return ascending ? -1 : 1;
        }
        return 0;
      });
      
      rows.forEach(function(row, rowIndex) {
        tbody.appendChild(row);
      });

      headers.forEach(function(h) {
        h.classList.remove('ascending', 'descending', 'sorted');
        h.style.backgroundColor = 'maroon';
        h.style.color = 'white';
        h.style.border = 'none';
        h.querySelector('.sort-arrow').textContent = '';
      });

      header.classList.toggle('ascending', !ascending);
      header.classList.toggle('descending', ascending);
      header.classList.add('sorted');
      header.style.backgroundColor = 'darkred';
      header.style.color = 'white';
      header.style.border = 'none';

      var arrow = header.querySelector('.sort-arrow');
      arrow.textContent = ascending ? '▼' : '▲';
      header.title = ascending ? 'Descending' : 'Ascending';
      positionIndicator(header);
    }

    var defaultHeader = document.getElementById('sort-id');
    sortTableByHeader(defaultHeader);

    headers.forEach(function(header) {
      header.addEventListener('click', function() {
        sortTableByHeader(header);
      });
    });
  });
</script>




<script>
document.addEventListener('DOMContentLoaded', function() {
  var editModal = document.getElementById('editInventoryModal');
  var editForm = document.getElementById('edit-inventory-form');

  editModal.addEventListener('show.bs.modal', function(event) {
    var button = event.relatedTarget;
    var inventoryId = button.getAttribute('data-inventory-id');
    var editUrl = '/inventories/' + inventoryId;
    console.log("editUrl: " + editUrl);

    fetch(editUrl + '/edit')
      .then(response => response.json())
      .then(data => {
        editForm.action = editUrl;
        
        document.getElementById('edit-item-name').textContent = data.item_name;

        if(editForm.querySelector('[name="inventory[item_id]"]')) {
          editForm.querySelector('[name="inventory[item_id]"]').value = data.item_id;
        }
        if(editForm.querySelector('[name="inventory[year_of_purchase]"]')) {
          editForm.querySelector('[name="inventory[year_of_purchase]"]').value = data.year_of_purchase;
        }
        if(editForm.querySelector('[name="inventory[location]"]')) {
          editForm.querySelector('[name="inventory[location]"]').value = data.location;
        }
        if(editForm.querySelector('[name="inventory[condition_of_item]"]')) {
          editForm.querySelector('[name="inventory[condition_of_item]"]').value = data.condition_of_item;
        }
        if(editForm.querySelector('[name="inventory[owner_email]"]')) {
          editForm.querySelector('[name="inventory[owner_email]"]').value = data.owner_email;
        }
        if(editForm.querySelector('[name="inventory[user_email]"]')) {
          editForm.querySelector('[name="inventory[user_email]"]').value = data.user_email;
        }
        if(editForm.querySelector('[name="inventory[sku]"]')) {
          editForm.querySelector('[name="inventory[sku]"]').value = data.sku;
        }
      });
  });

  editForm.addEventListener('submit', function(event) {
    event.preventDefault();
    var formData = new FormData(editForm);
    var editUrl = editForm.action;

    fetch(editUrl, {
      method: 'PATCH',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        $('#editInventoryModal').modal('hide');
        $.ajax({
          url: "/inventories",
          type: "GET",
          dataType: "script"
        });
      } else {
        alert('Failed to update inventory item: ' + data.errors.join(', '));
      }
    });
  });
});
</script>
